// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: bbrpc/barter_backup_server.proto

package bbrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BarterBackupServer_HealthCheck_FullMethodName        = "/bbrpc.BarterBackupServer/HealthCheck"
	BarterBackupServer_PeerExchange_FullMethodName       = "/bbrpc.BarterBackupServer/PeerExchange"
	BarterBackupServer_GetContentRevision_FullMethodName = "/bbrpc.BarterBackupServer/GetContentRevision"
	BarterBackupServer_SetContentRevision_FullMethodName = "/bbrpc.BarterBackupServer/SetContentRevision"
	BarterBackupServer_Download_FullMethodName           = "/bbrpc.BarterBackupServer/Download"
	BarterBackupServer_EncryptedDownload_FullMethodName  = "/bbrpc.BarterBackupServer/EncryptedDownload"
	BarterBackupServer_Chat_FullMethodName               = "/bbrpc.BarterBackupServer/Chat"
	BarterBackupServer_EncryptedChat_FullMethodName      = "/bbrpc.BarterBackupServer/EncryptedChat"
)

// BarterBackupServerClient is the client API for BarterBackupServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// BarterBackupServer is gRPC service implemented by BarterBackup daemon and
// exposed to the world as an onion site. BarterBackup nodes speak to each other
// using this protocol. A single main key must be used by a single instance of
// BarterBackup node as a time.
type BarterBackupServerClient interface {
	// HealthCheck returns success when the server is healthy.
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// PeerExchange shares peers (onion IDs) with the peer. This is needed for
	// peers to discover other peers in the network.
	PeerExchange(ctx context.Context, in *PeerExchangeRequest, opts ...grpc.CallOption) (*PeerExchangeResponse, error)
	// GetContentRevision returns the most recent state of content IDs of both
	// nodes as recorded by the responding side.
	GetContentRevision(ctx context.Context, in *GetContentRevisionRequest, opts ...grpc.CallOption) (*GetContentRevisionResponse, error)
	// SetContentRevision proposes another peer to download and store the data
	// referenced in the request. If peer agrees, it will respond successfully.
	SetContentRevision(ctx context.Context, in *SetContentRevisionRequest, opts ...grpc.CallOption) (*SetContentRevisionResponse, error)
	// Download downloads a section of a file which can be content of either
	// the requester or the responder or a file sent in chat by the responder.
	Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*DownloadResponse, error)
	// EncryptedDownload makes encrypted download request. The encryption
	// password needs to be setup out-of-band. This is used only within an
	// encrypted chat.
	EncryptedDownload(ctx context.Context, in *EncryptedDownloadRequest, opts ...grpc.CallOption) (*EncryptedDownloadResponse, error)
	// Chat sends a chat action to another side.
	Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatResponse, error)
	// EncryptedChat sends a symmetrically encrypted chat action. The
	// encryption password needs to be setup out-of-band.
	EncryptedChat(ctx context.Context, in *EncryptedChatRequest, opts ...grpc.CallOption) (*EncryptedChatResponse, error)
}

type barterBackupServerClient struct {
	cc grpc.ClientConnInterface
}

func NewBarterBackupServerClient(cc grpc.ClientConnInterface) BarterBackupServerClient {
	return &barterBackupServerClient{cc}
}

func (c *barterBackupServerClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, BarterBackupServer_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barterBackupServerClient) PeerExchange(ctx context.Context, in *PeerExchangeRequest, opts ...grpc.CallOption) (*PeerExchangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PeerExchangeResponse)
	err := c.cc.Invoke(ctx, BarterBackupServer_PeerExchange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barterBackupServerClient) GetContentRevision(ctx context.Context, in *GetContentRevisionRequest, opts ...grpc.CallOption) (*GetContentRevisionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetContentRevisionResponse)
	err := c.cc.Invoke(ctx, BarterBackupServer_GetContentRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barterBackupServerClient) SetContentRevision(ctx context.Context, in *SetContentRevisionRequest, opts ...grpc.CallOption) (*SetContentRevisionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetContentRevisionResponse)
	err := c.cc.Invoke(ctx, BarterBackupServer_SetContentRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barterBackupServerClient) Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*DownloadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadResponse)
	err := c.cc.Invoke(ctx, BarterBackupServer_Download_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barterBackupServerClient) EncryptedDownload(ctx context.Context, in *EncryptedDownloadRequest, opts ...grpc.CallOption) (*EncryptedDownloadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EncryptedDownloadResponse)
	err := c.cc.Invoke(ctx, BarterBackupServer_EncryptedDownload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barterBackupServerClient) Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChatResponse)
	err := c.cc.Invoke(ctx, BarterBackupServer_Chat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barterBackupServerClient) EncryptedChat(ctx context.Context, in *EncryptedChatRequest, opts ...grpc.CallOption) (*EncryptedChatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EncryptedChatResponse)
	err := c.cc.Invoke(ctx, BarterBackupServer_EncryptedChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BarterBackupServerServer is the server API for BarterBackupServer service.
// All implementations must embed UnimplementedBarterBackupServerServer
// for forward compatibility.
//
// BarterBackupServer is gRPC service implemented by BarterBackup daemon and
// exposed to the world as an onion site. BarterBackup nodes speak to each other
// using this protocol. A single main key must be used by a single instance of
// BarterBackup node as a time.
type BarterBackupServerServer interface {
	// HealthCheck returns success when the server is healthy.
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// PeerExchange shares peers (onion IDs) with the peer. This is needed for
	// peers to discover other peers in the network.
	PeerExchange(context.Context, *PeerExchangeRequest) (*PeerExchangeResponse, error)
	// GetContentRevision returns the most recent state of content IDs of both
	// nodes as recorded by the responding side.
	GetContentRevision(context.Context, *GetContentRevisionRequest) (*GetContentRevisionResponse, error)
	// SetContentRevision proposes another peer to download and store the data
	// referenced in the request. If peer agrees, it will respond successfully.
	SetContentRevision(context.Context, *SetContentRevisionRequest) (*SetContentRevisionResponse, error)
	// Download downloads a section of a file which can be content of either
	// the requester or the responder or a file sent in chat by the responder.
	Download(context.Context, *DownloadRequest) (*DownloadResponse, error)
	// EncryptedDownload makes encrypted download request. The encryption
	// password needs to be setup out-of-band. This is used only within an
	// encrypted chat.
	EncryptedDownload(context.Context, *EncryptedDownloadRequest) (*EncryptedDownloadResponse, error)
	// Chat sends a chat action to another side.
	Chat(context.Context, *ChatRequest) (*ChatResponse, error)
	// EncryptedChat sends a symmetrically encrypted chat action. The
	// encryption password needs to be setup out-of-band.
	EncryptedChat(context.Context, *EncryptedChatRequest) (*EncryptedChatResponse, error)
	mustEmbedUnimplementedBarterBackupServerServer()
}

// UnimplementedBarterBackupServerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBarterBackupServerServer struct{}

func (UnimplementedBarterBackupServerServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedBarterBackupServerServer) PeerExchange(context.Context, *PeerExchangeRequest) (*PeerExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PeerExchange not implemented")
}
func (UnimplementedBarterBackupServerServer) GetContentRevision(context.Context, *GetContentRevisionRequest) (*GetContentRevisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContentRevision not implemented")
}
func (UnimplementedBarterBackupServerServer) SetContentRevision(context.Context, *SetContentRevisionRequest) (*SetContentRevisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetContentRevision not implemented")
}
func (UnimplementedBarterBackupServerServer) Download(context.Context, *DownloadRequest) (*DownloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedBarterBackupServerServer) EncryptedDownload(context.Context, *EncryptedDownloadRequest) (*EncryptedDownloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncryptedDownload not implemented")
}
func (UnimplementedBarterBackupServerServer) Chat(context.Context, *ChatRequest) (*ChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedBarterBackupServerServer) EncryptedChat(context.Context, *EncryptedChatRequest) (*EncryptedChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncryptedChat not implemented")
}
func (UnimplementedBarterBackupServerServer) mustEmbedUnimplementedBarterBackupServerServer() {}
func (UnimplementedBarterBackupServerServer) testEmbeddedByValue()                            {}

// UnsafeBarterBackupServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BarterBackupServerServer will
// result in compilation errors.
type UnsafeBarterBackupServerServer interface {
	mustEmbedUnimplementedBarterBackupServerServer()
}

func RegisterBarterBackupServerServer(s grpc.ServiceRegistrar, srv BarterBackupServerServer) {
	// If the following call pancis, it indicates UnimplementedBarterBackupServerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BarterBackupServer_ServiceDesc, srv)
}

func _BarterBackupServer_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarterBackupServerServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarterBackupServer_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarterBackupServerServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarterBackupServer_PeerExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerExchangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarterBackupServerServer).PeerExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarterBackupServer_PeerExchange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarterBackupServerServer).PeerExchange(ctx, req.(*PeerExchangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarterBackupServer_GetContentRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContentRevisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarterBackupServerServer).GetContentRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarterBackupServer_GetContentRevision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarterBackupServerServer).GetContentRevision(ctx, req.(*GetContentRevisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarterBackupServer_SetContentRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetContentRevisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarterBackupServerServer).SetContentRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarterBackupServer_SetContentRevision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarterBackupServerServer).SetContentRevision(ctx, req.(*SetContentRevisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarterBackupServer_Download_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarterBackupServerServer).Download(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarterBackupServer_Download_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarterBackupServerServer).Download(ctx, req.(*DownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarterBackupServer_EncryptedDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptedDownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarterBackupServerServer).EncryptedDownload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarterBackupServer_EncryptedDownload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarterBackupServerServer).EncryptedDownload(ctx, req.(*EncryptedDownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarterBackupServer_Chat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarterBackupServerServer).Chat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarterBackupServer_Chat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarterBackupServerServer).Chat(ctx, req.(*ChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarterBackupServer_EncryptedChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptedChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarterBackupServerServer).EncryptedChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarterBackupServer_EncryptedChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarterBackupServerServer).EncryptedChat(ctx, req.(*EncryptedChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BarterBackupServer_ServiceDesc is the grpc.ServiceDesc for BarterBackupServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BarterBackupServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bbrpc.BarterBackupServer",
	HandlerType: (*BarterBackupServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _BarterBackupServer_HealthCheck_Handler,
		},
		{
			MethodName: "PeerExchange",
			Handler:    _BarterBackupServer_PeerExchange_Handler,
		},
		{
			MethodName: "GetContentRevision",
			Handler:    _BarterBackupServer_GetContentRevision_Handler,
		},
		{
			MethodName: "SetContentRevision",
			Handler:    _BarterBackupServer_SetContentRevision_Handler,
		},
		{
			MethodName: "Download",
			Handler:    _BarterBackupServer_Download_Handler,
		},
		{
			MethodName: "EncryptedDownload",
			Handler:    _BarterBackupServer_EncryptedDownload_Handler,
		},
		{
			MethodName: "Chat",
			Handler:    _BarterBackupServer_Chat_Handler,
		},
		{
			MethodName: "EncryptedChat",
			Handler:    _BarterBackupServer_EncryptedChat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bbrpc/barter_backup_server.proto",
}
