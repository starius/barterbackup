// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v3.21.12
// source: storedpb/stored.proto

package storedpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ContentRevision specifies a particular version of user content produced
// from client-provided files and set by a clirpc.SetFile call.
// AEAD(ContentRevision) is used as content_id in bbrpc. The content of this
// struct is used to derive the keys used for AEAD encryption of Metadata and
// for AES_CTR encryption of the files. Files don't need AEAD, because their
// hashes are stored in Metadata.
type ContentRevision struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// created_at is a Unix timestamp (seconds) at the time of a SetFile call.
	CreatedAt int64 `protobuf:"varint,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// created_at_ns is the nanosecond component corresponding to created_at.
	CreatedAtNs int64 `protobuf:"varint,2,opt,name=created_at_ns,json=createdAtNs,proto3" json:"created_at_ns,omitempty"`
	// metadata_aead_length is the length of AEAD-encrypted Metadata in bytes.
	MetadataAeadLength int64 `protobuf:"varint,3,opt,name=metadata_aead_length,json=metadataAeadLength,proto3" json:"metadata_aead_length,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ContentRevision) Reset() {
	*x = ContentRevision{}
	mi := &file_storedpb_stored_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContentRevision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentRevision) ProtoMessage() {}

func (x *ContentRevision) ProtoReflect() protoreflect.Message {
	mi := &file_storedpb_stored_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentRevision.ProtoReflect.Descriptor instead.
func (*ContentRevision) Descriptor() ([]byte, []int) {
	return file_storedpb_stored_proto_rawDescGZIP(), []int{0}
}

func (x *ContentRevision) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ContentRevision) GetCreatedAtNs() int64 {
	if x != nil {
		return x.CreatedAtNs
	}
	return 0
}

func (x *ContentRevision) GetMetadataAeadLength() int64 {
	if x != nil {
		return x.MetadataAeadLength
	}
	return 0
}

// FileHeader represents a single user-provided file that participates in
// forming the current content blob.
type FileHeader struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// name is an arbitrary identifier shown to the user (for example,
	// a filename).
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// file_length is the length of the file in bytes.
	FileLength int64 `protobuf:"varint,2,opt,name=file_length,json=fileLength,proto3" json:"file_length,omitempty"`
	// file_sha256 is the SHA-256 hash of the file.
	FileSha256    []byte `protobuf:"bytes,3,opt,name=file_sha256,json=fileSha256,proto3" json:"file_sha256,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileHeader) Reset() {
	*x = FileHeader{}
	mi := &file_storedpb_stored_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileHeader) ProtoMessage() {}

func (x *FileHeader) ProtoReflect() protoreflect.Message {
	mi := &file_storedpb_stored_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileHeader.ProtoReflect.Descriptor instead.
func (*FileHeader) Descriptor() ([]byte, []int) {
	return file_storedpb_stored_proto_rawDescGZIP(), []int{1}
}

func (x *FileHeader) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FileHeader) GetFileLength() int64 {
	if x != nil {
		return x.FileLength
	}
	return 0
}

func (x *FileHeader) GetFileSha256() []byte {
	if x != nil {
		return x.FileSha256
	}
	return nil
}

// Peer is data about the peer that should survive a node reset.
type Peer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// onion_pubkey is the peer's onion service public key.
	OnionPubkey []byte `protobuf:"bytes,1,opt,name=onion_pubkey,json=onionPubkey,proto3" json:"onion_pubkey,omitempty"`
	// aead_key is the per-peer symmetric key for chat, encrypted for storage.
	AeadKey []byte `protobuf:"bytes,2,opt,name=aead_key,json=aeadKey,proto3" json:"aead_key,omitempty"`
	// score_seconds is the accumulated availability score in seconds. The
	// higher, the better this peer was for us.
	ScoreSeconds int64 `protobuf:"varint,3,opt,name=score_seconds,json=scoreSeconds,proto3" json:"score_seconds,omitempty"`
	// score_measured_at is a Unix timestamp (seconds) when score was measured.
	ScoreMeasuredAt int64 `protobuf:"varint,4,opt,name=score_measured_at,json=scoreMeasuredAt,proto3" json:"score_measured_at,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Peer) Reset() {
	*x = Peer{}
	mi := &file_storedpb_stored_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Peer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Peer) ProtoMessage() {}

func (x *Peer) ProtoReflect() protoreflect.Message {
	mi := &file_storedpb_stored_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Peer.ProtoReflect.Descriptor instead.
func (*Peer) Descriptor() ([]byte, []int) {
	return file_storedpb_stored_proto_rawDescGZIP(), []int{2}
}

func (x *Peer) GetOnionPubkey() []byte {
	if x != nil {
		return x.OnionPubkey
	}
	return nil
}

func (x *Peer) GetAeadKey() []byte {
	if x != nil {
		return x.AeadKey
	}
	return nil
}

func (x *Peer) GetScoreSeconds() int64 {
	if x != nil {
		return x.ScoreSeconds
	}
	return 0
}

func (x *Peer) GetScoreMeasuredAt() int64 {
	if x != nil {
		return x.ScoreMeasuredAt
	}
	return 0
}

// Metadata is short data that is stored together with the main content on
// other peers and survives a node reset.
type Metadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// most_recent_content is the latest content revision.
	MostRecentContent *ContentRevision `protobuf:"bytes,1,opt,name=most_recent_content,json=mostRecentContent,proto3" json:"most_recent_content,omitempty"`
	// files is the list of files stored as a concatenation in the content
	// after the metadata.
	Files []*FileHeader `protobuf:"bytes,2,rep,name=files,proto3" json:"files,omitempty"`
	// peers is the list of known peers with some information about them.
	Peers         []*Peer `protobuf:"bytes,3,rep,name=peers,proto3" json:"peers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	mi := &file_storedpb_stored_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_storedpb_stored_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_storedpb_stored_proto_rawDescGZIP(), []int{3}
}

func (x *Metadata) GetMostRecentContent() *ContentRevision {
	if x != nil {
		return x.MostRecentContent
	}
	return nil
}

func (x *Metadata) GetFiles() []*FileHeader {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *Metadata) GetPeers() []*Peer {
	if x != nil {
		return x.Peers
	}
	return nil
}

var File_storedpb_stored_proto protoreflect.FileDescriptor

const file_storedpb_stored_proto_rawDesc = "" +
	"\n" +
	"\x15storedpb/stored.proto\x12\bstoredpb\"\x86\x01\n" +
	"\x0fContentRevision\x12\x1d\n" +
	"\n" +
	"created_at\x18\x01 \x01(\x03R\tcreatedAt\x12\"\n" +
	"\rcreated_at_ns\x18\x02 \x01(\x03R\vcreatedAtNs\x120\n" +
	"\x14metadata_aead_length\x18\x03 \x01(\x03R\x12metadataAeadLength\"b\n" +
	"\n" +
	"FileHeader\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1f\n" +
	"\vfile_length\x18\x02 \x01(\x03R\n" +
	"fileLength\x12\x1f\n" +
	"\vfile_sha256\x18\x03 \x01(\fR\n" +
	"fileSha256\"\x95\x01\n" +
	"\x04Peer\x12!\n" +
	"\fonion_pubkey\x18\x01 \x01(\fR\vonionPubkey\x12\x19\n" +
	"\baead_key\x18\x02 \x01(\fR\aaeadKey\x12#\n" +
	"\rscore_seconds\x18\x03 \x01(\x03R\fscoreSeconds\x12*\n" +
	"\x11score_measured_at\x18\x04 \x01(\x03R\x0fscoreMeasuredAt\"\xa7\x01\n" +
	"\bMetadata\x12I\n" +
	"\x13most_recent_content\x18\x01 \x01(\v2\x19.storedpb.ContentRevisionR\x11mostRecentContent\x12*\n" +
	"\x05files\x18\x02 \x03(\v2\x14.storedpb.FileHeaderR\x05files\x12$\n" +
	"\x05peers\x18\x03 \x03(\v2\x0e.storedpb.PeerR\x05peersB*Z(github.com/starius/barterbackup/storedpbb\x06proto3"

var (
	file_storedpb_stored_proto_rawDescOnce sync.Once
	file_storedpb_stored_proto_rawDescData []byte
)

func file_storedpb_stored_proto_rawDescGZIP() []byte {
	file_storedpb_stored_proto_rawDescOnce.Do(func() {
		file_storedpb_stored_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_storedpb_stored_proto_rawDesc), len(file_storedpb_stored_proto_rawDesc)))
	})
	return file_storedpb_stored_proto_rawDescData
}

var file_storedpb_stored_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_storedpb_stored_proto_goTypes = []any{
	(*ContentRevision)(nil), // 0: storedpb.ContentRevision
	(*FileHeader)(nil),      // 1: storedpb.FileHeader
	(*Peer)(nil),            // 2: storedpb.Peer
	(*Metadata)(nil),        // 3: storedpb.Metadata
}
var file_storedpb_stored_proto_depIdxs = []int32{
	0, // 0: storedpb.Metadata.most_recent_content:type_name -> storedpb.ContentRevision
	1, // 1: storedpb.Metadata.files:type_name -> storedpb.FileHeader
	2, // 2: storedpb.Metadata.peers:type_name -> storedpb.Peer
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_storedpb_stored_proto_init() }
func file_storedpb_stored_proto_init() {
	if File_storedpb_stored_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_storedpb_stored_proto_rawDesc), len(file_storedpb_stored_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_storedpb_stored_proto_goTypes,
		DependencyIndexes: file_storedpb_stored_proto_depIdxs,
		MessageInfos:      file_storedpb_stored_proto_msgTypes,
	}.Build()
	File_storedpb_stored_proto = out.File
	file_storedpb_stored_proto_goTypes = nil
	file_storedpb_stored_proto_depIdxs = nil
}
